<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic SYSTEM "https://helpserver.labs.jb.gg/help/schemas/mvp/html-entities.dtd">

<topic xsi:noNamespaceSchemaLocation="https://helpserver.labs.jb.gg/help/schemas/mvp/topic.v2.xsd"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       title="FAQ"
       id="FAQ">

    <deflist>
        <def title="What is the proper way to pronounce Ktor?" id="pronounce">
            <p>
                <emphasis>Kay-tor</emphasis>
            </p>
        </def>

        <def title="How do I put questions, report bugs, contact you, contribute, give feedback, etc.?" id="feedback">
            <p>
                Go to the <a href="https://ktor.io/support/">Support</a> page to learn more about the available support channels.
                The <a href="https://github.com/ktorio/ktor/blob/main/CONTRIBUTING.md">How to contribute</a> guide describes the ways you can contribute to Ktor.
            </p>
        </def>

        <def title="What does CIO mean?" id="cio">
            <p>
                CIO stands for <emphasis>Coroutine-based I/O</emphasis>.
                Usually we call it to an engine that uses Kotlin and Coroutines to implement the logic implementing an IETF RFC or another protocol without relying on external JVM-based libraries.
            </p>
        </def>

        <def title="How to fix unresolved (red) Ktor imports?" id="ktor-artifact">
            <p>
                Make sure that corresponding Ktor artifacts are added in the build script.
                For example, Ktor with the Netty engine requires the following artifacts:
            </p>
            <code-block lang="Groovy" interpolate-variables="true">
                dependencies {
                    implementation "io.ktor:ktor-server-core:%ktor_version%"
                    implementation "io.ktor:ktor-server-netty:%ktor_version%"
                }
            </code-block>
        </def>

        <def title="Does Ktor provide a way to catch IPC signals (e.g. SIGTERM or SIGINT) so the server shutdown can be handled gracefully?" id="sigterm">
            <p>
                If you are running an <a href="create_server.topic" anchor="engine-main">EngineMain</a>, it will be handled automatically.
                Otherwise, you need to <a href="https://github.com/ktorio/ktor/blob/main/ktor-server/ktor-server-cio/jvmAndNix/src/io/ktor/server/cio/EngineMain.kt#L21">handle it manually</a>.
                You can use the <code>Runtime.getRuntime().addShutdownHook</code> JVM's facility.
            </p>
        </def>

        <def title="How do I get the client IP behind a proxy?" id="proxy-ip">
            <p>
                The <code>call.request.origin</code> property gives <a href="requests.md" anchor="request_information">connection information</a> about the original caller (the proxy) if the proxy provides proper headers, and the <a href="forward-headers.md">ForwardedHeaderSupport</a> plugin is installed.
            </p>
        </def>

        <def title="How to fix 'java.lang.IllegalStateException: No instance for key AttributeKey: Locations'?" id="no-attribute-key-locations">
            <p>
                You get this error if you try to use the <a href="locations.md">Locations</a> plugin without actually installing it.
            </p>
        </def>

        <def title="How can I test the latest commits on main?" id="bleeding-edge">
            <p>
                You can get Ktor nightly builds from <code>jetbrains.space</code>.
                Learn more from <a href="https://ktor.io/eap/">Early Access Program</a>.
            </p>
        </def>

        <def title="How can I be sure of which version of Ktor am I using?" id="ktor-version-used">
            <p>
                You can use the <a href="default_headers.md">DefaultHeaders</a> plugin that sends a <code>Server</code> response header with the Ktor version on it, for example:
            </p>
            <code-block interpolate-variables="true">
                Server: ktor-server-core/%ktor_version%
            </code-block>
        </def>

        <def title="My route is not being executed. How can I debug it?" id="route-not-executing">
            <p>
                Ktor provides a tracing mechanism to help troubleshooting routing decisions.
                Check the <a href="tracing_routes.md">Tracing the routing decisions</a> section.
            </p>
        </def>

        <def title="How to resolve 'io.ktor.pipeline.InvalidPhaseException: Phase Phase('YourPhase') was not registered for this pipeline'?" id="invalid-phase">
            <p>
                This means that you are trying to use a phase that is not registered as a reference for another phase.
                For example, this might happen in the Routing plugin if you try to register a phase relation inside a node,
                but the phase referenced is defined in another ancestor Route node. Since route phases and interceptors are later
                merged, it should work, but you need to register it in your Route node:
            </p>
            <code-block lang="kotlin">
                route.addPhase(PhaseDefinedInAncestor)
                route.insertPhaseAfter(PhaseDefinedInAncestor, MyNodePhase)
            </code-block>
        </def>

        <def title="How to resolve 'io.ktor.server.engine.BaseApplicationResponse$ResponseAlreadySentException: Response has already been sent'?" id="response-already-sent">
            <p>
                This means that you, or a plugin or interceptor, have already called <code>call.respond* </code> functions, and you are calling it again.
            </p>
        </def>

        <def title="How can I subscribe to Ktor events?" id="ktor-events">
            <p>
                See the <a href="events.md">Application monitoring</a> page to learn more.
            </p>
        </def>

        <def title="How to resolve 'Exception in thread main com.typesafe.config.ConfigException$Missing: No configuration setting found for key ktor'?" id="cannot-find-application-conf">
            <p>
                This means that Ktor was not able to find the <code>application.conf</code> file.
                Re-check that it is in the <code>resources</code> folder, and that the <code>resources</code> folder is marked as such.
                You can consider to set up a project using the <a href="https://start.ktor.io/">project generator</a> or the <a href="intellij-idea.topic">IntelliJ plugin</a> to have a working project as the base.
            </p>
        </def>

        <def title="Can I use Ktor on Android?" id="android-support">
            <p>
                Yes, Ktor servers and clients  are known to work on Android 5 (API 21) or greater, at least with the Netty engine.
            </p>
        </def>

        <def title="Why 'CURL -I' returns a '404 Not Found'?" id="curl-head-not-found">
            <p>
                <code>CURL -I</code> is an alias of <code>CURL --head</code> that performs <code>HEAD</code> requests.
                By default, Ktor doesn't handle <code>HEAD</code> requests for <code>GET</code> handlers.
                To enable this capability, install the <a href="autoheadresponse.md">AutoHeadResponse</a> plugin.
            </p>
        </def>

        <def title="How to resolve an infinite redirect when using the 'HttpsRedirect' plugin" id="infinite-redirect">
            <p>
                The most probable cause is that your backend is behind a reverse proxy or a load balancer, and that this intermediary
                is making normal HTTP requests to your backend, thus the <code>HttpsRedirect</code> plugin inside your Ktor backend believes that it is a normal HTTP request and responds with the redirect.
            </p>
            <p>
                Normally, reverse-proxies send some headers describing the original request (like it was HTTPS, or the original IP address), and there is a plugin <a href="forward-headers.md">ForwardedHeaderSupport</a> to parse those headers so the <a href="https-redirect.md">HttpsRedirect</a> plugin knows that the original request was HTTPS.
            </p>
        </def>
    </deflist>

</topic>
